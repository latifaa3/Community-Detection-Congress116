# -*- coding: utf-8 -*-
"""Project 2 Kel 1+n.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L5ppI2A3wr2cOO950tVlPW4VNfMU9ViJ

**Kelompok 1+n**\
Nabila Janatri Iswibowo - 1305210082\
Latifa Firdausi - 1305210073
"""

from ast import literal_eval
import networkx as nx
from datetime import datetime
import numpy as np
import community
from collections import defaultdict
from wordcloud import WordCloud
import pandas as pd
import matplotlib.pyplot as plt

"""**PREPROCESSING DATA**"""

#Preprocessing Data
members = pd.read_csv('house_members_116.csv', index_col = 0)

members.committee_assignments = members.committee_assignments.apply(literal_eval)
members.head()

#Preprocessing Data
bills = pd.read_csv('house_legislation_116.csv', index_col = 0, parse_dates=["date_introduced"])

bills.cosponsors=bills.cosponsors.apply(literal_eval)
bills.subjects = bills.subjects.apply(literal_eval)
bills.committees = bills.committees.apply(literal_eval)
bills.related_bills = bills.related_bills.apply(literal_eval)

bills.head()

df = pd.read_csv('house_legislation_116.csv')

text = ' '.join(df['title'])

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = None,
                min_font_size = 10).generate(text)

plt.figure(figsize = (8, 8), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)

plt.show()

data = pd.read_csv('house_members_116.csv')

text = ' '.join(data['current_party']) + ' ' + ' '.join(data['committee_assignments'].fillna(''))

wordcloud = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = None,
                min_font_size = 10).generate(text)

plt.figure(figsize = (8, 8), facecolor = None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad = 0)

plt.show()

"""**EXPLORATORY DATA ANALYSIS**

**Rancangan Undang Undang yang Diajukan dan Disahkan Menurut Partai dan Kebijakan**

Distribusi berikut merupakan distribusi rancangan undang undang berdasarkan dari partai anggota yang sudah mengusulkan dan kebijakan dari rancangan undang undang yang ada. Hasil plot menggambarkan hasil normalisasi yang menunjukkan persentase rancangan undang undang yang telah diusulkan. Terdapat 24 bidang rancangan undang undang yang diajukan oleh tiap belah pihak partai.
"""

areas = bills.policy_area.unique()

dic = {area: [0,0,0,0] for area in areas}

for index, row in bills.iterrows():
    if members.loc[row.sponsor].current_party == 'Democratic':
        dic[row.policy_area][0] += 1
        if row.bill_progress == ('Passed House' or 'Passed Senate' or 'Became Law' or 'To President' or 'Agreed to in House' or 'Agreed to in Senate'):
                dic[row.policy_area][1]+=1
    elif members.loc[row.sponsor].current_party == 'Republican':
        dic[row.policy_area][2] += 1
        if row.bill_progress == ('Passed House' or 'Passed Senate' or 'Became Law' or 'To President' or 'Agreed to in House' or 'Agreed to in Senate'):
                dic[row.policy_area][3]+=1

df = pd.DataFrame(dic.values(), index = dic.keys(), columns = ['Democratic', 'Democrats_Passed','Republican', 'Republicans_Passed']).sort_values('Democratic', ascending = False)

df.drop(np.nan, inplace = True)

df.loc['Total'] = [sum(df[x]) for x in df.columns]

df['Total'] = df.Democratic +df.Republican

df['Total_Passed'] = df.Democrats_Passed+df.Republicans_Passed

df['D%_passed']=df.Democrats_Passed/df.Total_Passed
df['R%_passed']=df.Republicans_Passed/df.Total_Passed
df['D%_introduced'] = df['Democratic']/df['Total']
df['R%_introduced'] = df['Republican']/df['Total']
df['%_passed'] = 100*(df['Total_Passed']/df['Total'])

df.fillna(0, inplace=True)

df.sort_values(by=['Total'], ascending = False, inplace= True)

n=25
x= df.head(n).index
y1= df.head(n)['D%_introduced']
y2= df.head(n)['R%_introduced']
total = df.head(n)['Total']

fig, (ax1) = plt.subplots(nrows =1, ncols =1, figsize=(12, 4), squeeze = True)


ax1.bar(x, y1, label='Partai Demokrat', alpha = .5)
ax1.bar(x, y2 ,bottom= y1,label= 'Partai Republik', alpha = .5)

for xpos, ypos, yval in zip(x, y1/2, y1):
    if yval>0:
        ax1.text(xpos, ypos, str(round(yval*100,0))+ "%", ha="center", va="center", rotation=90)
for xpos, ypos, yval in zip(x, y1+y2/2, y2):
    if yval>0:
        ax1.text(xpos, ypos, str(round(yval*100,0))+ "%", ha="center", va="center", rotation= 90)
for xpos, ypos, total in zip(x, y1+y2, total):
    ax1.text(xpos, ypos +.05, total, ha="center", va="bottom", rotation= 90)

for tick in ax1.get_xticklabels():
    tick.set_rotation(90)

ax1.set_title('Rancangan Undang Undang Diajukan dan Disahkan')
ax1.legend(loc = 'upper right')

ax1.set_ylim(0,1.5)
ax1.yaxis.set_visible(False)

ax3 = ax1.twinx()
ax3.plot(x, df.head(n).Total, label = 'Total Diajukan')
ax3.set_ylim(0,641)
ax3.legend(loc = 'upper left')
ax3.yaxis.set_visible(True)
ax3.set_ylabel('RUU Diajukan')

plt.show()

"""**RUU yang Disahkan Oleh Partai**"""

fig, (ax2) = plt.subplots(nrows =1, ncols =1, figsize=(12, 4), squeeze = True)

df.sort_values(by=['Total_Passed'], ascending = False, inplace= True)

x= df.head(n).index
y1= df.head(n)['D%_passed']
y2= df.head(n)['R%_passed']
y3= df.head(n)['Democratic']+ df.head(n)['Republican']
total = df.head(n)['Total_Passed']

ax2.bar(x, y1, label='Demokrat', alpha=.5)
ax2.bar(x, y2 ,bottom= y1,label= 'Republik', alpha=.5)

ax4 = ax2.twinx()
ax4.plot(x, df.head(n)['%_passed'], label = 'Percent_Passed')
ax4.set_ylim(0,30)
ax4.legend(loc = 'upper left')
ax4.yaxis.set_visible(True)
ax4.set_ylabel("RUU Disahkan")

for xpos, ypos, yval in zip(x, y1/2, y1):
    if yval>0:
        ax2.text(xpos, ypos, str(round(yval*100,0))+ "%", ha="center", va="center", rotation=90)
for xpos, ypos, yval in zip(x, y1+y2/2, y2):
    if yval>0:
        ax2.text(xpos, ypos, str(round(yval*100,0))+ "%", ha="center", va="center", rotation= 90)
for xpos, ypos, total in zip(x, y1+y2, total):
    ax2.text(xpos, ypos +.05, total, ha="center", va="bottom", rotation= 90)

for tick in ax2.get_xticklabels():
    tick.set_rotation(90)
ax2.set_title('RUU yang Disahkan Oleh Partai')
ax2.legend(loc = 'upper right')

ax2.set_ylim(0,1.5)
ax2.yaxis.set_visible(False)

plt.show()

"""**Perwakilan dari Tiap Partai Berdasarkan Jumlah RUU yang Disahkan**

Setelah analisis RUU yang telah disahkan berdasarkan pengajuan dari tiap partai, berikut adalah jumlah total keseluruhan yang akan diurutkan berdasarkan jumlah RUU yang disahkan. Output menunjukkan yang paling efektif dari jumlah RUU yang disahkan diantaranya Eliot Engel, Elijah Cummings, Sheila Jackson Lee.Kemudian Partai Demokrat sebagai mayoritas yang memiliki jumlah RUU yang disahkan. Sementara untuk Partai Republik yang paling efektif adalah Michael Mccaul.
"""

dic = {k:[0,0] for k in members.index}

for index, row in bills.iterrows():
    dic[row.sponsor][1]+=1
    if row.bill_progress == ('Passed House' or 'Passed Senate' or 'Became Law' or 'To President' or 'Agreed to in House' or 'Agreed to in Senate'):
        dic[row.sponsor][0]+=1

num_passed = pd.DataFrame.from_dict(dic, orient = 'index',columns = ['num_passed', 'total_introduced'])

num_passed['percent_passed'] =( num_passed['num_passed']/num_passed['total_introduced'])*100

num_passed.sort_values(by = ['num_passed','percent_passed'], ascending = False, inplace = True)

num_passed.merge(members[['name', 'current_party', 'committee_assignments']], how = 'inner', left_index= True, right_index =True).head(10)

"""**Create Sponsor/Cosponsor Networks**"""

policy_area = 'Crime and Law Enforcement'

MD = nx.MultiDiGraph()
MD.add_nodes_from(members.index)
for index, row in bills.iterrows():
    sponsor = [row.sponsor for i in range(len(row.cosponsors))]
    zipped = zip(row.cosponsors, sponsor)
    zipped = list(zipped)

    MD.add_edges_from(zipped, bill = index, policy_area = row.policy_area, bill_progress = row.bill_progress)

to_drop =['G000582', 'R000600', 'N000147', 'P000610', 'S001177', 'S001204', 'P000197', 'J000255']
MD.remove_nodes_from(to_drop)

nx.set_node_attributes(MD,  members.current_party.to_dict(), 'party')

G = nx.Graph()

for n, nbrs in MD.adjacency():
    for nbr, edict in nbrs.items():
        if (G.has_edge(n,nbr)) :
            G[n][nbr]['weight'] +=len(edict)
        else:
             G.add_edge(n, nbr, weight=len(edict))

MDs = nx.MultiDiGraph()

for u,v,d in MD.edges(data = True):
    if d['policy_area'] ==  policy_area:
        MDs.add_edge(u,v,bill = d['bill'])

Gs = nx.Graph()

for n, nbrs in MDs.adjacency():
    for nbr, edict in nbrs.items():
        if (Gs.has_edge(n,nbr)) :
            Gs[n][nbr]['weight'] +=len(edict)
        else:
             Gs.add_edge(n, nbr, weight=len(edict))

"""**Detect Communities and Plot Total**"""

from community import community_louvain
partition = community_louvain.best_partition(G)

import matplotlib.pyplot as plt
import networkx as nx

def get_paired_color_palette(size):
    palette = []
    for i in range(size*2):
        palette.append(plt.cm.Paired(i))
    return palette

communities = []
louvain = community_louvain.best_partition(G, weight='weight', random_state=42)
for i in set(louvain.values()):
    nodelist = [n for n in G.nodes if (louvain[n]==i)]
    communities.append(nodelist)

clusters_count = len(set(louvain.values()))
plt.figure(figsize=(10, 10))
light_colors = get_paired_color_palette(clusters_count)[0::2]
dark_colors = get_paired_color_palette(clusters_count)[1::2]
g = nx.spring_layout(G, weight='weight', seed=42, threshold=.0000000001)

for i in set(louvain.values()):
    nodelist = [n for n in G.nodes if (louvain[n]==i)]
    edgelist = [e for e in G.edges if ((louvain[e[0]]==i) or (louvain[e[1]]==i))]
    node_color = [light_colors[i] for _ in range(len(nodelist))]
    edge_color = [dark_colors[i] for _ in range(len(edgelist))]
    nx.draw_networkx_nodes(G, g, nodelist=nodelist, node_color=node_color, edgecolors='k', label=i)
    nx.draw_networkx_edges(G, g, edgelist=edgelist, alpha=.2, edge_color=edge_color)

plt.title('Louvain clustering: Dewan Perwakilan Rakyat', fontdict={'fontsize': 25})
plt.legend()
plt.axis('off')
plt.show()

"""**Hasil Analisis**"""

community_members = defaultdict()
community_bills = defaultdict()

for i in range(3):
    dic ={}
    index = []
    community_of_interest = i

    subgraph = MD.subgraph(communities[community_of_interest])
    community_members[i] = pd.DataFrame.from_dict(nx.algorithms.centrality.in_degree_centrality(subgraph), orient = 'index', columns = ['centrality']).merge(members[['name','current_party', 'committee_assignments']], how = 'left', left_index = True, right_index = True).sort_values(by= 'centrality',ascending = False)

    community_bills[i] = bills.loc[[row.sponsor in communities[i] for index, row in bills.iterrows()]]

    for bill, row in community_bills[i].iterrows():
        index.append(bill)
        dic[bill] = 0
        for cosponsor in row.cosponsors:
            if cosponsor in community_members[i].index:
                dic[bill] += 1

    tally = pd.DataFrame.from_dict(dic, orient = 'index',columns = ['in_community_cosponsors'])
    community_bills[i] = tally.merge(community_bills[i][['title', 'bill_progress']],how = 'outer', left_index =True, right_index= True)

l = []
index = []
for i in range(3):
    community_i = members.loc[communities[i]]
    democrats = len(community_i.loc[community_i.current_party == 'Democratic'])
    republicans = len(community_i.loc[community_i.current_party == 'Republican'])
    independents = len(community_i.loc[community_i.current_party == 'Independent'])
    total_members = len(community_i)
    total_bills = len(community_bills[i])
    bills_passed = len(community_bills[i].loc[community_bills[i].bill_progress ==  ('Passed House' or 'Passed Senate' or 'Became Law' or 'To President' or 'Agreed to in House' or 'Agreed to in Senate')])
    l.append([democrats, republicans, independents, total_members, total_bills, bills_passed])
    index.append('community_' +str(i))


df = pd.DataFrame(l, columns = ['democrat', 'republicans', 'independents', 'total_members', 'total_bills', 'bills_passed'],index = index)
df['percent_passed'] = (df['bills_passed']/df['total_bills'])*100
df.head()

"""**Most Central Member Pada Komunitas**"""

df = pd.concat([community_members[0], community_members[1], community_members[2]], keys =
         [0,1,2])

df.index.rename(['community','member'], inplace = True)

df= df.merge(num_passed, how = 'inner', left_on = 'member', right_index=True).sort_values(['community','centrality'], ascending = False)

pd.concat([df.loc[2].head(10), df.loc[1].head(10), df.loc[0].head(10)], keys =
         [2,1,0])

"""**Most Effective Member Pada Komunitas**"""

df = pd.concat([community_members[0], community_members[1], community_members[2]], keys =
         [0,1,2])
df.index.rename(['community','member'], inplace = True)
df= df.merge(num_passed, how = 'inner', left_on = 'member', right_index=True).sort_values(['community','num_passed','percent_passed', 'total_introduced'], ascending = False)
pd.concat([df.loc[2].head(5), df.loc[1].head(5), df.loc[0].head(5)], keys =
         [2,1,0])

"""**Detect Communities by Crime and Law Enforcement**"""

def get_paired_color_palette(size):
    palette = []
    for i in range(size*2):
        palette.append(plt.cm.Paired(i))
    return palette

communities =[]
louvain = community_louvain.best_partition(G, weight='weight', random_state=42)
for i in set(louvain.values()):
    nodelist = [n for n in Gs.nodes if (louvain[n]==i)]
    communities.append(nodelist)

clusters_count = len(set(louvain.values()))
plt.figure(figsize=(10, 10))
light_colors = get_paired_color_palette(clusters_count)[0::2]
dark_colors = get_paired_color_palette(clusters_count)[1::2]
g = nx.drawing.layout.spring_layout(Gs, weight = 'weight', seed = 42, threshold = .0000000001)

for i in set(louvain.values()):
    nodelist = [n for n in Gs.nodes if (louvain[n]==i)]
    edgelist = [e for e in Gs.edges if ((louvain[e[0]]==i) or (louvain[e[1]]==i))]
    node_color = [light_colors[i] for _ in range(len(nodelist))]
    edge_color = [dark_colors[i] for _ in range(len(edgelist))]
    nx.draw_networkx_nodes(Gs, g, nodelist=nodelist, node_color=node_color, edgecolors='k', label = i)
    nx.draw_networkx_edges(Gs, g, edgelist=edgelist, alpha=.5, edge_color=edge_color)

plt.title('Policy Area: Crime and Law Enforcement', fontdict={'fontsize': 25})
plt.legend()
plt.axis('off')
plt.show()

"""**Hasil Analisis**"""

community_members = defaultdict()
community_bills = defaultdict()

for i in range(3):
    dic ={}
    index = []
    community_of_interest = i

    subgraph = MDs.subgraph(communities[community_of_interest])
    community_members[i] = pd.DataFrame.from_dict(nx.algorithms.centrality.in_degree_centrality(subgraph), orient = 'index', columns = ['centrality']).merge(members[['name','current_party', 'committee_assignments', 'state']], how = 'left', left_index = True, right_index = True).sort_values(by= 'centrality',ascending = False)
    community_bills[i] = bills.loc[[(row.sponsor in communities[i] and row.policy_area == 'Crime and Law Enforcement') for index, row in bills.iterrows() ]]

    for bill, row in community_bills[i].iterrows():
        index.append(bill)
        dic[bill] = 0
        for cosponsor in row.cosponsors:
            if cosponsor in community_members[i].index:
                dic[bill] += 1

    tally = pd.DataFrame.from_dict(dic, orient = 'index',columns = ['in_community_cosponsors'])
    community_bills[i] = tally.merge(community_bills[i][['title', 'bill_progress']],how = 'outer', left_index =True, right_index= True)

l = []
index = []

for i in range(3):


    community_i = members.loc[communities[i]]
    democrats = len(community_i.loc[community_i.current_party == 'Democratic'])
    republicans = len(community_i.loc[community_i.current_party == 'Republican'])
    independents = len(community_i.loc[community_i.current_party == 'Independent'])
    total_members = len(community_i)
    total_bills = len(community_bills[i])
    bills_passed = len(community_bills[i].loc[community_bills[i].bill_progress ==  ('Passed House' or 'Passed Senate' or 'Became Law' or 'To President' or 'Agreed to in House' or 'Agreed to in Senate')])
    l.append([democrats, republicans, independents, total_members, total_bills, bills_passed])
    index.append('community_' +str(i))

df = pd.DataFrame(l, columns = ['democrats', 'republicans', 'independents', 'total_members', 'total_bills', 'bills_passed'],index = index)
df['percent_passed'] = (df['bills_passed']/df['total_bills'])*100
df.head()

"""**Most Central Member Pada Komunitas**"""

df = pd.concat([community_members[0], community_members[1], community_members[2]], keys =
         [0,1,2])
df.index.rename(['community','member'], inplace = True)
df.sort_values(['community','centrality'], ascending = False, inplace = True)
pd.concat([df.loc[0].head(10), df.loc[1].head(10), df.loc[2].head(10)], keys =
         [0,1,2])

"""**Most Effectives Member Pada Komunitas**"""

dic = {k:[0,0] for k in members.index}

for index, row in bills.iterrows():
    if row.policy_area == 'Crime and Law Enforcement':
        dic[row.sponsor][1]+=1
        if row.bill_progress == ('Passed House' or 'Passed Senate' or 'Became Law' or 'To President' or 'Agreed to in House' or 'Agreed to in Senate'):
            dic[row.sponsor][0]+=1
num_passed = pd.DataFrame.from_dict(dic, orient = 'index',columns = ['num_passed', 'total_introduced'])

num_passed['percent_passed'] =( num_passed['num_passed']/num_passed['total_introduced'])*100

num_passed.sort_values(by = ['num_passed','percent_passed'], ascending = False, inplace = True)

df = pd.concat([community_members[0], community_members[1], community_members[2]], keys =
         [0,1,2])

df.index.rename(['community','member'], inplace = True)
df= df.merge(num_passed, how = 'inner', left_on = 'member', right_index=True).sort_values(['num_passed','percent_passed', 'total_introduced'], ascending =False)

pd.concat([df.loc[1].head(6), df.loc[2].head(5), df.loc[0].head(5)], keys =
         [1,2,0])